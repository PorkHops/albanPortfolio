@page "/"
@using MudBlazor.Utilities
@using MudBlazor
@using System.Text.Json
@using System.IO
@using albanPortfolio.Components.Utils
@inject IWebHostEnvironment Environment

<PageTitle>Alban!</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Me Section :) -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4">Sr. Software Engineer & Full-stack Developer</MudText>
        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="mb-4">
            SWE specializing in .NET, Blazor, and Windows Services.
        </MudText>
        <MudText Typo="Typo.body1" Class="mb-4">
            Welcome to My Portfolio! My name is Alban Shekaj. I am a software developer passionate about creating elegant
            solutions to complex problems. With expertise in modern web technologies
            and software development best practices, I bring ideas to life through clean, efficient, and maintainable code.
        </MudText>
    </MudPaper>

    <!-- Skills Section -->
    <MudText Typo="Typo.h4" Class="mb-4">Technical Skills</MudText>
    <MudGrid Class="mb-8" Justify="Justify.Center">
        <MudItem xs="12" sm="12" md="4" Class="d-flex justify-center">
            <MudPaper Class="pa-4" Elevation="2" Style="width: 100%; max-width: 350px;">
                <MudText Typo="Typo.h6" Class="mb-2">Frontend Development</MudText>
                <MudChipSet T="string">
                    @foreach (var skill in frontendSkills)
                    {
                        <MudChip Color="@(Enum.Parse<Color>(skill.Color))" Variant="Variant.Text">@skill.Name</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" Class="d-flex justify-center">
            <MudPaper Class="pa-4" Elevation="2" Style="width: 100%; max-width: 350px;">
                <MudText Typo="Typo.h6" Class="mb-2">Backend Development</MudText>
                <MudChipSet T="string">
                    @foreach (var skill in backendSkills)
                    {
                        <MudChip Color="@(Enum.Parse<Color>(skill.Color))" Variant="Variant.Text">@skill.Name</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" Class="d-flex justify-center">
            <MudPaper Class="pa-4" Elevation="2" Style="width: 100%; max-width: 350px;">
                <MudText Typo="Typo.h6" Class="mb-2">Tools & Technologies</MudText>
                <MudChipSet T="string">
                    @foreach (var skill in toolSkills)
                    {
                        <MudChip Color="@(Enum.Parse<Color>(skill.Color))" Variant="Variant.Text">@skill.Name</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Resume Section -->
    <Resume />
    <br />

    <!-- Contact Section -->
    <MudText Typo="Typo.h4" Class="mb-4">Let's Connect</MudText>
    <MudPaper Class="pa-8 text-center" Elevation="2">
        <MudText Class="mb-4">I'm always interested in new opportunities and collaborations!</MudText>
        <Contact />
    </MudPaper>
</MudContainer>

@code {
    private List<Skill> backendSkills  = new List<Skill>();
    private List<Skill> frontendSkills = new List<Skill>();
    private List<Skill> toolSkills     = new List<Skill>();

    protected override Task OnInitializedAsync()
    {
        LoadSkills();
        return Task.CompletedTask;
    }

    private void LoadSkills()
    {
        try
        {
            var filePath   = Path.Combine(Environment.ContentRootPath, "Components", "Utils", "Skills.json");
            var jsonString = File.ReadAllText(filePath);
            var response   = JsonSerializer.Deserialize<SkillsData>(jsonString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (response?.Skills != null)
            {
                frontendSkills = response.Skills.Frontend;
                backendSkills  = response.Skills.Backend;
                toolSkills     = response.Skills.Tools;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading skills: {ex.Message}");
        }
    }

    public class SkillsData
    {
        public Skills Skills { get; set; } = new();
    }

    public class Skills
    {
        public List<Skill> Frontend { get; set; } = new();
        public List<Skill> Backend { get; set; }  = new();
        public List<Skill> Tools { get; set; }    = new();
    }

    public class Skill
    {
        public string Name { get; set; } = "";
        public string Level { get; set; } = "";
        public int Years { get; set; }
        public string Color => Level switch
        {
            "Advanced"     => "Success",
            "Intermediate" => "Info",
            _              => "Primary"
        };
    }
}